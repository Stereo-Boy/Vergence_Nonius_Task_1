% MLFIT -- Least square estimation (equivalent to MLE)%% Usage:%    [paramBest, mse] = mlfit('fn', p0, xvals, yvals, stdev);%    %    where 'fn' is a function defined in an M-file as 'y=fn(x, p)'.%    p0 are initial values for parameters to explore%    c1 and c2 are optional min and max arg to define a space to expore for each parameter%    xx are the x%    yy are the data to fit%    sd is the inverse weight of the yy datapoint (optional)%    opt are optional arguments to transfer to fn but that will not be explored by fminsearch%% Alternative usages:%    [paramBest, mse] = mlfit('fn', params0, xvals, yvals); % no stdev%    paramBest = mlfit('fn', params0, xvals, yvals, stdev); % no mse%%% 27-JUL-2004: Pascal Mamassian% 17-AUG-2004: changed 'fmins' into 'fminsearch' and use a nested function%% modified 2 MAI 2007, Adrien Chopin:% Use of fminsearchbnd to constraint the search between c1 and c2function [p1, mse] = mlfit(fn, p0, c1,c2, xx, yy, sd,opt)%opt is an optional parameter to pass to the used functionoptions = optimset('MaxFunEvals',30000,'MaxIter',30000);    useOptArg=1;   if ~exist('sd','var')||isempty(sd);   sd = ones(size(xx));   end   if ~exist('opt','var'); useOptArg=0; end %detect whether we have opt to transfer   if ~exist('c1','var');   c1 = [];   end   if ~exist('c2','var');   c2 = [];   end       [p1, ee] = fminsearchbnd(@errfcn, p0,c1,c2, options);   % [p1, ee] = lsqnonlin2(@(p) cumulGauss6(xx,p), p0,c1,c2);    mse = ee / length(xx);      % mean square error    control=(sd==0); %to avoid a zero division    sd(control)=0.0000001; if sum(control)>0; warning('[mlfit] we corrected the sd=0 to avoid zero division'); end    %% define a nested function    function err = errfcn(pp)        if useOptArg            ypred = feval(fn, xx, pp, opt);        else            ypred = feval(fn, xx, pp);        end        err = nansum(((yy - ypred) ./ sd) .^2);    endend